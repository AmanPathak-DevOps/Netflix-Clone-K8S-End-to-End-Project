pipeline{
    agent any
    tools{
        nodejs 'nodejs'
    }
    environment {
        SCANNER_HOME=tool 'sonar-server'
    }
    stages {
        stage('Workspace Cleaning'){
            steps{
                cleanWs()
            }
        }
        stage('Checkout from Git'){
            steps{
                git branch: 'master', url: 'https://github.com/AmanPathak-DevOps/Netflix-Clone-K8S-End-to-End-Project.git'
            }
        }
        stage("Sonarqube Analysis") {
            steps {
                dir('Application-Code') {
                    withSonarQubeEnv('sonar-server') {
                        // Capture Node path from Jenkins NodeJS tool
                        sh '''
                        export NODE_PATH=$(which node)
                        echo "Node executable path: $NODE_PATH"

                        $SCANNER_HOME/bin/sonar-scanner \
                        -Dsonar.projectKey=NetflixClone \
                        -Dsonar.projectName=NetflixClone \
                        -Dsonar.sources=src \
                        -Dsonar.language=ts \
                        -Dsonar.nodejs.executable=$NODE_PATH \
                        -Dsonar.exclusions=dist/**,node_modules/**,public/** \
                        '''
                    }
                }
            }
        }
        stage("Quality Gate"){
           steps {
                script {
                    waitForQualityGate abortPipeline: false, credentialsId: 'sonar-token' 
                }
            } 
        }
        stage('Install Dependencies') {
            steps {
                dir('Application-Code') {
                    sh "npm install -g @sonar/scan"
                }
            }
        }
        stage('OWASP DP SCAN') {
            steps {
                dir('Application-Code') {
                    dependencyCheck additionalArguments: '--scan ./', odcInstallation: 'owasp-dp-check'
                }
            }
        }
        stage('TRIVY FS SCAN') {
            steps {
                dir('Application-Code') {
                    sh "trivy fs . > trivyfs.txt"
                }
            }
        }
        stage("Docker Image Build"){
            steps{
                dir('Application-Code') {
                    script{
                       withDockerRegistry(credentialsId: 'docker', toolName: 'docker'){   
                           sh "docker system prune -f"
                           sh "docker container prune -f"
                           sh "docker build --build-arg TMDB_V3_API_KEY=8b174e589e2f03f9fd8123907bd7800c -t netflix ."
                        }
                    }
                }
            }
        }
        stage("Docker Image Pushing"){
            steps{
                dir('Application-Code') {
                    script{
                       withDockerRegistry(credentialsId: 'docker', toolName: 'docker'){   
                           sh "docker tag netflix avian19/netflix:latest "
                           sh "docker push avian19/netflix:latest "
                        }
                    }
                }
            }
        }
        stage("TRIVY Image Scan"){
            steps{
                sh "trivy image avian19/netflix:latest > trivyimage.txt" 
            }
        }
        stage('Deploy to Kubernetes'){
            steps{
                script{
                    dir('Kubernetes') {
                        withKubeConfig(caCertificate: '', clusterName: '', contextName: '', credentialsId: 'k8s', namespace: '', restrictKubeConfigAccess: false, serverUrl: '') {
                                sh 'kubectl apply -f deployment.yml'
                                sh 'kubectl apply -f service.yml'
                                sh 'kubectl get svc'
                                sh 'kubectl get all'
                        }   
                    }
                }
            }
        }
    }
    post {
        always {
            script {
                def colorCode = currentBuild.result == 'SUCCESS' ? '#2eb886' : 
                                currentBuild.result == 'FAILURE' ? '#ff0000' : '#daa038'
    
                slackSend(
                    channel: '#devops-alerts',
                    color: colorCode,
                    message: """
                    *üöÄ Jenkins Build Notification*
                    *Project:* ${env.JOB_NAME}
                    *Build Number:* #${env.BUILD_NUMBER}
                    *Status:* *${currentBuild.result}*
                    *URL:* <${env.BUILD_URL}|Open Build>
    
                    ${currentBuild.result == 'SUCCESS' ? '‚úÖ All steps completed successfully!' : 
                    currentBuild.result == 'FAILURE' ? '‚ùå Build failed. Please check logs.' : 
                    '‚ö†Ô∏è Build is unstable or aborted.'}
                    """.stripIndent()
                )
            }
        }
    }
}
